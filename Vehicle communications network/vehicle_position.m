% Lucas TRAMONTE
% Vitor OPSFELDER ESTANISLAU
% Max LEE

% TP - Communication V2X

function [counter,relative_position_AP] = vehicle_position(strData)
% Input : 'exported_file.mat' file (struct generated by Driving Scenario Designer after simulation -> Export -> Export Sensor Data)
% Output : counter = counter array the number of vehicles in the range of the AP indexed by time
%          relative_position_AP = relative distance from each vehicle from the AP indexed by time
 
%initialization of scenario
data = strData; %loads the scenario file into the variable data
fild_name=fieldnames(data);
simulation = data.(fild_name{1}); %simulation variables indexed by time
 
relative_position_AP = {}; 
counter = [];
SNR_permis = 30;
com_success = [];

%paramters initialization
K = length(data); %number of simulation points
position_RSU = data(1).ActorPoses(1).Position;%take the fixed position of the AP
 
for i = 1:K
        % Compute the relative distance from each vehicle to the AP
        distances = [];

        for n = 2:length(simulation(1).ActorPoses) % Start from the 2nd column (AP is in 1st)
            % Calculate the Euclidean distance (norm) between the vehicle and the AP in 2D plane
            dist = norm(position_RSU - simulation(i).ActorPoses(n).Position, 2);
            distances = [distances dist];
        end

        % SNR Calculation
        SNR = [];
        for p = 1:length(simulation(i).ObjectDetections)
            SNR_mesure = simulation(i).ObjectDetections{p, 1}.ObjectAttributes{1, 1}.SNR;
            SNR = [SNR SNR_mesure];
        end

        % Store the calculated distances
        relative_position_AP = [relative_position_AP {distances}];
        dist_AP = 70; % Range of the AP (sensor range in the toolbox is 70 meters)

        % Count the number of vehicles inside the AP's range
        cars_inside = length(find(distances < dist_AP));
        counter = [counter cars_inside];

        % Compute successful communications based on SNR being above the threshold (30 dB)
        comm = length(find(SNR > SNR_permis));
        com_success = [com_success comm];
        % Normalize the communication success ratio for time step 'i'
        com_success(i) = com_success(i) / length(simulation(i).ObjectDetections);
    end

    % Plot the loss rate over time
    stem(1:1:K, (1 - com_success) .^ 2);
    title('Loss Rate Over Time');
    xlabel('Time');
    ylabel('Loss Rate');
    
    % Compute and plot the average loss rate
    taux_perte = mean((1 - com_success) .^ 2);
    yline(taux_perte, '--', "T_{perte}_{,moy}");
    grid on;
end